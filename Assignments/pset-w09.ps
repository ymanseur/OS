%!PS-Adobe-3.0
%%Creator: groff version 1.19.1
%%CreationDate: Wed Nov 18 01:25:44 2015
%%DocumentNeededResources: font Times-Roman
%%+ font Helvetica-Bold
%%+ font Courier
%%+ font Times-Bold
%%DocumentSuppliedResources: procset grops 1.19 1
%%Pages: 6
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.19 1
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Helvetica-Bold
%%IncludeResource: font Courier
%%IncludeResource: font Times-Bold
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Bold@0 ENC0/Times-Bold RE/Courier@0 ENC0/Courier RE
/Helvetica-Bold@0 ENC0/Helvetica-Bold RE/Times-Roman@0 ENC0/Times-Roman
RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(ECE357:Computer Operating Systems)69.336 48 Q
(PS 9/pg 1)41.55 E(\2512015 Jef)119.78 E 2.5(fH)-.25 G(akner)-2.5 E/F1
11/Helvetica-Bold@0 SF(Pr)234.494 97 Q(ob)-.22 E(lem 1 -- Pr)-.11 E
(ocess Sc)-.22 E(heduler)-.11 E/F2 11/Times-Roman@0 SF 1.383
(In this assignment, you will create an en)58 116 R 1.382
(vironment which simulates the issues of scheduling, forking, e)-.44 F
1.382(xiting and)-.165 F -.11(wa)58 129 S .9(iting for a child e).11 F
.901(xit in a k)-.165 F 3.651(ernel. Although)-.11 F .901(you may borro)
3.651 F 3.651(wi)-.275 G .901(deas liberally from the Linux k)-3.651 F
.901(ernel, you will \214nd)-.11 F
(that code is not directly transplantable, for the follo)58 142 Q
(wing reasons:)-.275 E 2.755<8357>36 168 S .005(hereas the Linux k)
-2.755 F .005(ernel runs in supervisor mode and has complete control o)
-.11 F -.165(ve)-.165 G 2.755(ra).165 G .005(ll hardw)-2.755 F .005
(are, your routines will e)-.11 F .004(xist in)-.165 F 2.75(au)58 181 S
(ser)-2.75 E(-le)-.22 E -.165(ve)-.275 G 2.75(lt).165 G(estbed en)-2.75
E(vironment, running within one single-threaded UNIX process.)-.44 E
3.682<8354>36 207 S .932(he Linux k)-3.682 F .932
(ernel has the ability to create per)-.11 F .933
(-process virtual address space.)-.22 F -1.21(Yo)6.433 G 3.683(uw)1.21 G
.933(ill not...all of your simulated tasks)-3.683 F .051(will e)58 220 R
.051(xist within the single address space of the UNIX process.)-.165 F
(Ho)5.551 E(we)-.275 E -.165(ve)-.275 G .931 -.44(r, y).165 H .051
(ou will ha).44 F .381 -.165(ve t)-.22 H 2.801(oc).165 G .05
(reate and manage distinct)-2.801 F(user)58 233 Q(-le)-.22 E -.165(ve)
-.275 G 2.75(ls).165 G(tacks for each task.)-2.75 E
(Hints on doing this are gi)5.5 E -.165(ve)-.275 G 2.75(nw).165 G
(ithin.)-2.75 E 2.75<8354>36 259 S(here will be no system call interf)
-2.75 E 2.75(ace. Calls)-.11 F(to your routines from the sample tasks w\
ill be via simple function calls.)2.75 E 2.75<8354>36 285 S
(here are no hardw)-2.75 E(are interrupts.)-.11 E -1.21(Yo)5.5 G 2.75
(uw)1.21 G(ill simulate the periodic interv)-2.75 E
(al timer by means of UNIX signals.)-.275 E 2.75<8359>36 311 S(our simu\
lated scheduler will deal only with a simulated uniprocessor en)-3.96 E
(vironment.)-.44 E -1.21(Yo)58 337 S 2.75(um)1.21 G(ust pro)-2.75 E
(vide the follo)-.165 E(wing:)-.275 E 2.75(-Ah)60.75 363 S
(eader \214le called)-2.75 E/F3 11/Courier@0 SF(sched.h)2.75 E F2
(which de\214nes:)2.75 E/F4 10/Courier@0 SF(struct sched_proc {)115.6
377 Q(/* use this for each simulated task */)173.2 391 Q
(/* internals are up to you)173.2 405 Q(*/)18 E
(/* probably should include things like the task state */)173.2 419 Q
(/* priority, accumulated, cpu time, stack address, etc. */)173.2 433 Q
(};)115.6 447 Q(struct sched_waitq {)115.6 475 Q
(/* use this for each event/wakeup queue */)173.2 489 Q
(/* internals are up to you */)173.2 503 Q(};)115.6 517 Q
(#define SCHED_NPROC)115.6 531 Q 6(XXX //)1.2 F
(\(maximum pid\)-1, up to you but >=256)6 E
(/* Suggested task state values */)173.2 545 Q(#define SCHED_READY)115.6
559 Q(XXX)30 E(#define SCHED_RUNNING)115.6 573 Q(XXX)18 E
(#define SCHED_SLEEPING)115.6 587 Q(XXX)12 E(#define SCHED_ZOMBIE)115.6
601 Q(XXX)24 E F2 2.75(-A\214)58 641 S(le)-2.75 E F3(sched.c)2.75 E F2
(which implements the follo)2.75 E(wing functions:)-.275 E F4
(sched_init\(void \(*init_fn\)\(\)\))58 655 Q({)58 669 Q
(/* This function will be called once by the testbed program.)115.6 683
Q(It should initialize your scheduling system, including)173.2 697 Q 0
Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(ECE357:Computer Operating Systems)36 52 Q
(PS 9/pg 2)78.105 E(\2512015 Jef)164.158 E 2.75(fH)-.275 G(akner)-2.75 E
/F1 10/Courier@0 SF
(setting up a periodic interval timer \(see setitimer\),)173.2 105 Q
(establishing sched_tick as the signal handler for)173.2 119 Q
(that timer, and creating the initial task which will)173.2 133 Q
(have pid of 1.)173.2 147 Q(After doing so, make pid 1 runnable and)12 E
(transfer execution to it \(including switching to its)173.2 161 Q
(stack\) at location init_fn.)173.2 175 Q(This function is not)12 E
(expected to return and if it does so it is OK to)173.2 189 Q
(have unpredictable results.)173.2 203 Q(*/)115.6 217 Q(})58 231 Q
(sched_fork\(\))58 259 Q({)58 273 Q
(/* Just like the real fork, create a new simulated task which)115.6 287
Q(is a copy of the caller.)173.2 301 Q(Allocate a new pid for the)12 E
(child, and make the child runnable and eligible to)173.2 315 Q
(be scheduled.)173.2 329 Q(sched_fork returns 0 to the child and)12 E
(the child's pid to the parent.)173.2 343 Q(It is not required that)12 E
(the relative order of parent vs child being scheduled)173.2 357 Q
(be defined.)173.2 371 Q(On error, return -1.)12 E
(Unlike the real fork, you do not need to duplicate the)173.2 399 Q
(entire address space.)173.2 413 Q(Parent and child will execute in the)
12 E(same address space.)173.2 427 Q(However, you will need to create a)
12 E(new private stack area for the child and initialize it to be)173.2
441 Q 6(ac)173.2 455 S(opy of the parent's.)-6 E
(See below for discussion on stacks.)12 E(*/)115.6 469 Q(})58 483 Q
(sched_exit\(int code\))58 511 Q({)58 525 Q
(/* Terminate the current task, making it a ZOMBIE, and store)115.6 539
Q(the exit code.)173.2 553 Q(If a parent is sleeping in sched_wait\(\),)
12 E(wake it up and return the exit code to it.)173.2 567 Q
(There will be no equivalent of SIGCHLD.)173.2 581 Q(sched_exit)12 E
(will not return.)173.2 595 Q
(Another runnable process will be scheduled.)12 E(*/)115.6 609 Q(})58
623 Q(sched_wait\(int *exit_code\))58 651 Q({)58 665 Q
(/* Return the exit code of a zombie child and free the)115.6 679 Q
(resources of that child.)173.2 693 Q(If there is more)12 E
(than one such child, the order in which the codes are)173.2 707 Q 0 Cg
EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(ECE357:Computer Operating Systems)36 52 Q
(PS 9/pg 3)78.105 E(\2512015 Jef)164.158 E 2.75(fH)-.275 G(akner)-2.75 E
/F1 10/Courier@0 SF(returned is not defined.)173.2 105 Q
(If there are no zombie children,)12 E
(but the caller does have at least one child, place)173.2 119 Q
(the caller in SLEEPING, to be woken up when a child)173.2 133 Q
(calls sched_exit\(\).)173.2 147 Q(If there are no children, return)18 E
(immediately with -1, otherwise the return value is 0.)173.2 161 Q
(Since there are no simulated signals, the exit code)173.2 175 Q
(is simply the integer from sched_exit\(\).)173.2 189 Q(*/)115.6 217 Q
(})58 231 Q(sched_nice\(int niceval\))58 259 Q({)58 273 Q
(/* Set the current task's "nice value" to the supplied parameter.)115.6
287 Q(Nice values may range from +19 \(least preferred static)173.2 301
Q(priority\) to -20 \(most preferred\).)173.2 315 Q
(Clamp any out-of-range)12 E(values to those limits)173.2 329 Q(*/)115.6
343 Q(})58 357 Q(sched_getpid\(\))58 385 Q({)58 399 Q
(/* return current task's pid */)115.6 413 Q(})58 427 Q
(sched_getppid\(\))58 455 Q({)58 469 Q
(/* return pid of the parent of current task */)115.6 483 Q(})58 497 Q
(sched_gettick\(\))58 525 Q({)58 539 Q
(/* return the number of timer ticks since startup */)115.6 553 Q(})58
567 Q(sched_ps\(\))58 595 Q({)58 609 Q
(/* output to stdout a listing of all of the current tasks,)115.6 623 Q
(including sleeping and zombie tasks.)173.2 637 Q(List the)12 E
(following information in tabular form:)173.2 651 Q(pid)230.8 665 Q
(ppid)230.8 679 Q(current state)230.8 693 Q
(base addr of private stack area)230.8 707 Q 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(ECE357:Computer Operating Systems)36 52 Q
(PS 9/pg 4)78.105 E(\2512015 Jef)164.158 E 2.75(fH)-.275 G(akner)-2.75 E
/F1 10/Courier@0 SF(static priority)230.8 105 Q(dynamic priority)230.8
119 Q(total CPU time used \(in ticks\))230.8 133 Q(*/)115.6 147 Q
(/* You should establish sched_ps\(\) as the signal handler)115.6 161 Q
(for SIGABRT so that a ps can be forced at any)173.2 175 Q
(time by sending the testbed SIGABRT)173.2 189 Q(*/)12 E(})58 203 Q
(sched_switch\(\))58 245 Q({)58 259 Q
(/* This is the suggested name of a required routine which will)115.6
273 Q(never be called directly by the testbed. sched_switch\(\))173.2
287 Q(should be the sole place where a context switch is made,)173.2 301
Q(analogous to schedule\(\) within the Linux kernel.)173.2 315 Q
(sched_switch\(\) should place the current task on the run queue)173.2
329 Q(\(assuming it is READY\), then select the best READY task from)
173.2 343 Q(the runqueue, taking into account the dynamic priority)173.2
357 Q(of each task.)173.2 371 Q(The selected task should then be placed)
12 E(in the RUNNING state and a context switch made to it)173.2 385 Q
(\(unless, of course, the best task is also the current task\))173.2 399
Q(See discussion below on support routines for context switch.)173.2 413
Q(*/)115.6 427 Q(})58 441 Q(sched_tick\(\))58 469 Q({)58 483 Q
(/* This is the suggested name of a required routine which will)115.6
497 Q(never be called directly by the testbed, but instead will)173.2
511 Q(be the signal handler for the SIGVTALRM signal generated by)173.2
525 Q(the periodic timer.)173.2 539 Q
(Each occurrence of the timer signal)12 E(is considered a tick.)173.2
553 Q(The number of ticks since sched_init)12 E
(is to be returned by sched_gettick\(\).)173.2 567 Q
(sched_tick should examine the currently running)173.2 581 Q
(task and if its time slice has just expired, mark that)173.2 595 Q
(task as READY, place it on the run queue based on its)173.2 609 Q
(current dynamic priority, and then call sched_switch\(\))173.2 623 Q
(to cause a new task to be run.)173.2 637 Q(Watch out for signal)12 E
(mask issues...remember SIGVTALARM will, by default,)173.2 651 Q
(be masked on entry to your signal handler.)173.2 665 Q(/*)115.6 679 Q
F0 -1.21(Yo)58 698 S .234(ur scheduling algorithm should ha)1.21 F .565
-.165(ve a r)-.22 H .235
(ange of static priority from 0 \(best\) to 39 \(w).165 F .235
(orst\), with the def)-.11 F .235(ault v)-.11 F .235(alue of)-.275 F 0
Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(ECE357:Computer Operating Systems)36 52 Q
(PS 9/pg 5)78.105 E(\2512015 Jef)164.158 E 2.75(fH)-.275 G(akner)-2.75 E
3.367(20. Y)58 104 R .617(ou are free to imitate Linux in terms of dyna\
mic priority and quantum time selection, e.g. by borro)-1.21 F .616
(wing ideas)-.275 F .18(from the O\(1\) scheduler or the CFS scheduler)
58 117 R 5.68(.Y)-.605 G .18(ou may also create an)-6.89 F 2.93(yi)-.165
G .18(mplementation of your choosing, consistent)-2.93 F
(with the generic scheduling objecti)58 130 Q -.165(ve)-.275 G 2.75(so)
.165 G 2.75(fg)-2.75 G -.275(iv)-2.75 G(ing tasks which ha).275 E .33
-.165(ve a b)-.22 H(etter static priority a greater share of the CPU.)
.165 E .875(Although in the real k)58 149 R .875(ernel, ticks come e)
-.11 F -.165(ve)-.275 G .875(ry 10ms or 1ms, it will be best if you slo)
.165 F 3.625(wt)-.275 G .875(hings do)-3.625 F .875(wn and establish a)
-.275 F(tick rate of 100ms or so.)58 162 Q
(Look up the setitimer system call.)5.5 E(SIGVT)58 181 Q .652
(ALRMs will therefore be arri)-1.023 F .652(ving periodically)-.275 F
6.152(.I)-.715 G 3.402(ti)-6.152 G 3.402(su)-3.402 G 3.402(pt)-3.402 G
3.402(oy)-3.402 G .652
(our sched_init\(\) function to set this up and mak)-3.402 F(e)-.11 E
.671(sched_tick\(\) the handler)58 194 R 6.171(.A)-.605 G .671
(lthough you don')-6.171 F 3.421(th)-.198 G -2.475 -.22(av e)-3.421 H
.671(to w)3.641 F .671
(orry about multi-processor type synchronization issues, you)-.11 F .348
(do need to to consider what w)58 207 R .348(ould happen if the SIGVT)
-.11 F .348(ALRM signal arri)-1.023 F -.165(ve)-.275 G 3.098(sd).165 G
.348(uring one of your routines.)-3.098 F .348(Thus you)5.848 F 2.485
(need to protect critical re)58 220 R 2.485
(gions by masking and unmasking these signals.)-.165 F 2.484
(This is analogous to a k)7.985 F 2.484(ernel for a)-.11 F
(uniprocessor system protecting critical re)58 233 Q
(gions by masking hardw)-.165 E(are interrupts.)-.11 E .739
(It is suggested that you maintain a global v)58 252 R .74
(ariable containing either the current pid or the)-.275 F/F1 11
/Courier@0 SF .74(struct sched_proc)3.49 F(*)58 265 Q F0
(representing the current task.)2.75 E 1.228(Performing a conte)58 284 R
1.227(xt switch means sa)-.165 F 1.227(ving the critical conte)-.22 F
1.227(xt information of the current task some)-.165 F 1.227
(where \(in your)-.275 F 2.24(case, the best place will be the)58 297 R
F1 2.24(struct sched_proc)4.99 F F0 2.241
(corresponding to the current task\), and restoring that)4.991 F .463
(information for the switched-to task.)58 310 R .463
(Along with this assignment you ha)5.963 F .792 -.165(ve b)-.22 H .462
(een supplied with the \214le).165 F F1(savectx.S)3.212 E F0
(which de\214nes tw)58 323 Q 2.75(or)-.11 G(outines:)-2.75 E/F2 10
/Courier@0 SF(int savectx\(struct savectx *ctx\);)115.6 337 Q
(void restorectx\(struct savectx *ctx,int retval\);)115.6 351 Q F0(The)
58 364 Q 2.79(yw)-.165 G .04(ork similarly to setjmp/longjmp.)-2.9 F
.041(In particular)5.54 F(,)-.44 E F1(savectx)2.791 E F0 .041
(will return 0 when it is called directly)2.791 F 2.791(,a)-.715 G(nd)
-2.791 E F1(retval)2.791 E F0(when control returns to it via)58 377 Q F1
(restorectx)2.75 E F0(.)A .039(Because you are in a shared virtual addr\
ess space, each simulated task needs its o)58 396 R .038(wn stack area.)
-.275 F .038(Creating a ne)5.538 F 2.788(ws)-.275 G(tack)-2.788 E
(area is relati)58 409 Q -.165(ve)-.275 G(ly easy in Linux:).165 E F2
(void *newsp;)58 423 Q
(if \(\(newsp=mmap\(0,STACK_SIZE,PROT_READ|PROT_WRITE,)115.6 437 Q
(MAP_PRIVATE|MAP_ANONYMOUS,0,0\)\)==MAP_FAILED\))154 451 Q({)115.6 465 Q
(perror\("mmap failed"\);)173.2 479 Q(})115.6 493 Q F0 -1.21(Yo)58 512 S
2.75(uc)1.21 G(an de\214ne)-2.75 E F1(STACK_SIZE)2.75 E F0
(to be 64K or so and that will pro)2.75 E
(vide plenty of room for the testbed en)-.165 E(vironment.)-.44 E 4.439
(If you are switching from one e)58 531 R 4.44
(xisting task to another e)-.165 F 4.44
(xisting task, then at the point where you call)-.165 F F1
(sched_switch\(\))58 544 Q F0 2.281
(in task A, your stack pointer is within the stack area that you ha)
5.031 F 2.61 -.165(ve a)-.22 H 2.28(llocated for task A.).165 F .139
(Therefore, the SP which is sa)58 557 R -.165(ve)-.22 G 2.889(db).165 G
(y)-2.889 E F1(savectx)2.889 E F0 .139
(will later be restored when task A is once ag)2.889 F .139
(ain scheduled.)-.055 F(Ho)5.639 E(we)-.275 E -.165(ve)-.275 G -.44(r,)
.165 G(ho)58 570 Q 2.75(wd)-.275 G 2.75(oy)-2.75 G(ou jump-start this p\
rocess for creating the init process or forking a ne)-2.75 E 2.75(wp)
-.275 G(rocess?)-2.75 E .962(During a fork, you will allocate a ne)58
589 R 3.711(ws)-.275 G .961(tack for the child, then)-3.711 F F1(memcpy)
3.711 E F0 .961(the entire contents of the current \(parent\))3.711 F
.847(stack into the ne)58 602 R 3.597(wc)-.275 G .847(hild stack.)-3.597
F -1.21(Yo)6.347 G 3.597(uk)1.21 G(no)-3.597 E 3.597(wt)-.275 G .847
(he base addresses of these tw)-3.597 F 3.597(os)-.11 G .847
(tacks, the dif)-3.597 F .847(ference between which \(in)-.275 F 1.23(b\
ytes\) is the adjustment which needs to be applied to stack-related add\
resses in the child stack.)58 615 R -1.21(Yo)6.729 G 3.979(uw)1.21 G
1.229(ill need to)-3.979 F 1.05(manipulate the)58 628 R F1(.regs[JB_SP])
3.8 E F0(and)3.8 E F1(.regs[JB_BP])3.8 E F0 1.05(entries of the)3.8 F F1
1.051(struct savectx)3.8 F F0(conte)3.801 E 1.051(xt of the child so)
-.165 F(that when it is scheduled, the ebp and esp re)58 641 Q
(gisters are correctly within the child')-.165 E 2.75(ss)-.605 G(tack.)
-2.75 E -1.21(Yo)58 660 S(u')1.21 E .173(ll also need to \214x all the \
addresses in the predecessor functions to)-.11 F F1(sched_fork)2.923 E
F0 .173(in the child')2.923 F 2.923(ss)-.605 G 2.923(tack. A)-2.923 F
(support)2.923 E(function)58 673 Q F1(adjstack)2.75 E F0
(has been supplied to you for that purpose.)2.75 E -.165(Fo)58 692 S
3.759(re).165 G 1.009(stablishing the init task, you could set up a)
-3.759 F F1(savectx)3.759 E F0 1.009
(structure in which the program counter is the function)3.759 F .232(re\
presenting the start of the init task, and the stack and base pointers \
are on the stack of the init task.)58 705 R -1.21(Yo)5.732 G 2.982(uc)
1.21 G .232(ould then)-2.982 F 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(ECE357:Computer Operating Systems)36 52 Q
(PS 9/pg 6)78.105 E(\2512015 Jef)164.158 E 2.75(fH)-.275 G(akner)-2.75 E
/F1 11/Courier@0 SF(restorectx)58 104 Q F0 2.75(,t)C
(hus jumping from the original in)-2.75 E -.22(vo)-.44 G(cation en).22 E
(vironment to the simulated multi-tasking en)-.44 E(vironment.)-.44 E
-1.21(Yo)58 123 S 3.013(us)1.21 G .264(hould ha)-3.013 F .594 -.165
(ve a g)-.22 H .264(lobal v).165 F .264
(ariable similar to the NEED_RESCHED \215ag in the Linux k)-.275 F 3.014
(ernel. It)-.11 F .264(may be set whene)3.014 F -.165(ve)-.275 G(r).165
E 2.956(as)58 136 S .205(cheduler routine \(e.g.)-2.956 F(sched_w)5.705
E(ak)-.11 E .205(eup\) decides that a conte)-.11 F .205
(xt switch might be needed.)-.165 F .205(It should be e)5.705 F .205
(xamined upon)-.165 F 1.209(return from an)58 149 R 3.96(ys)-.165 G 1.21
(ignal handler \(USR1,USR2 or VT)-3.96 F 1.21
(ALRM\) and if set, sched_switch should be called to ef)-1.023 F 1.21
(fect the)-.275 F(conte)58 162 Q 1.051(xt switch.)-.165 F 1.051
(Be careful when performing a conte)6.551 F 1.05(xt switch as you lea)
-.165 F 1.38 -.165(ve a s)-.22 H 1.05(ignal handler).165 F 6.55(.T)-.605
G 1.05(he signal mask will)-6.55 F .393(include the signal you ha)58 175
R .723 -.165(ve j)-.22 H .394(ust handled.).165 F .394
(If that mask is not restored before the conte)5.894 F .394
(xt switch, you may not recei)-.165 F -.165(ve)-.275 G(that signal ag)58
188 Q(ain!)-.055 E -1.21(Yo)58 207 S 4.392(us)1.21 G 1.642
(hould create your o)-4.392 F 1.642(wn testbed programs to e)-.275 F
-.165(xe)-.165 G 1.641(rcise your routines.).165 F 4.391(As)7.141 G
1.641(uggested test is to ha)-4.391 F 1.971 -.165(ve y)-.22 H 1.641
(our initial).165 F .313(simulated task fork se)58 220 R -.165(ve)-.275
G .314(ral times and create tasks with dif).165 F .314
(ferent nice priorities.)-.275 F .314(Each task should call sched_e)
5.814 F .314(xit and)-.165 F 1.329(the parent task should call sched_w)
58 233 R 4.079(ait. Use)-.11 F 1.329
(sched_ps to monitor the performance, e.g. call it whene)4.079 F -.165
(ve)-.275 G 4.079(rac).165 G(onte)-4.079 E(xt)-.165 E .785
(switch is being made.)58 246 R -1.21(Yo)6.285 G 3.535(us)1.21 G .786
(hould be able to demonstrate that your scheduler creates a f)-3.535 F
.786(air allocation of CPU time)-.11 F 1.278
(among CPU-bound tasks and responds to "nice" v)58 259 R 1.278
(alues accordingly)-.275 F 6.778(.I)-.715 G 4.028(ts)-6.778 G 1.278
(hould be safe to send output to stdout or)-4.028 F .145
(stderr from within your code at an)58 272 R 2.895(yt)-.165 G .146(ime,\
 although there is a possibility of truncated output if a signal arri)
-2.895 F -.165(ve)-.275 G 2.896(sa).165 G 2.896(tab)-2.896 G(ad)-2.896 E
(time.)58 285 Q/F2 11/Times-Bold@0 SF 1.603(Attach the output!!!)58 304
R F0(\(b)4.353 E 1.602(ut please, if there is a lot of deb)-.22 F 1.602
(ugging output, trim the e)-.22 F 1.602(xtraneous stuf)-.165 F 4.352
(f!\). Examine)-.275 F(the)4.352 E 1.363(performance of your code caref\
ully to see that it implements static and dynamic priority)58 317 R
6.864(.W)-.715 G 1.364(atch out for resource)-7.744 F 1.58
(leaks, endless loops, tasks which f)58 330 R 1.58
(ail to get scheduled, and of course the ine)-.11 F 1.58(vitable une)
-.275 F 1.58(xpected e)-.165 F 1.58(xits and/or core)-.165 F(dumps.)58
343 Q 0 Cg EP
%%Trailer
end
%%EOF
